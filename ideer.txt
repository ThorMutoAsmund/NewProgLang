No inheritence just containment and delegation

All method arguments be named. Positional arguments is an option to be used in e.g. math functions

Encapsulation of properties and methods. Private: Only this class. 

All member variables are defined through properties:

Immutables!!!

property Name; // Private member variable
property Name { get; } // Publicly readable member variable
property Name { get() => return $Name } // Publicly readable member variable with getter

So properties are by default private, but methods are default public!

Maybe public methods should be defined differently? E.g. in a public section of the class.
Private and public methods/properties with same names. Refer to the other by prefixing private or public

No need for protected? Or should be protected methods and properties be accessible for those that contain the objects?

Or there should be many types of protected.. could be called scopes. So certain methods/properties can be made available to some containers, and other to other containers.
Similar to the 'friend' concept

Overriding not possible because of no inheritance!

Also no need for New/Virtual.

Is there a use for Abstract?

What about Interfaces?

Functional Programming? Currying?

Async?

Null values?

Errors not possible?


Should public properties have capital letters? What about methods??
